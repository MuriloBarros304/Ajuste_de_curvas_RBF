# -*- coding: utf-8 -*-
"""Projeto-CN-Murilo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cAuff_g34BIGp5otb01buiisAH4yI2S_

Projeto Ajuste de Curvas RBF
CN - T03B
Murilo de Lima Barros

Ajuste de curvas com funções de base radial utilizando os dados de potência solar na cidade Albuquerque Né - PE, dados obtidos no Global Solar Atlas, disponível em: https://globalsolaratlas.info/detail?s=-8.035778,-37.441406&m=site.

Ajuste mensal
"""

import numpy as np
import matplotlib.pyplot as plt
import statistics as st

# Dados
jan = [0, 0, 50, 276, 419, 523, 572, 576, 553, 488, 408, 335, 271, 217, 82]
fev = [0, 0, 13, 232, 412, 531, 596, 589, 541, 477, 411, 339, 275, 210, 77]
mar = [0, 0, 11, 222, 408, 535, 589, 596, 565, 523, 450, 375, 319, 238, 73]
abr = [0, 0, 16, 273, 434, 515, 572, 577, 540, 485, 431, 371, 307, 224, 25]
mai = [0, 0, 15, 261, 398, 461, 508, 518, 496, 457, 414, 375, 325, 218, 10]
jun = [0, 0, 10, 232, 373, 406, 441, 455, 430, 393, 370, 339, 307, 220, 11]
jul = [0, 0, 8, 209, 356, 417, 464, 464, 426, 400, 392, 362, 327, 244, 17]
ago = [0, 0, 13, 259, 407, 475, 529, 551, 553, 541, 513, 469, 414, 304, 38]
set = [0, 0, 58, 311, 469, 577, 626, 660, 636, 602, 538, 475, 399, 270, 18]
out = [0, 0, 120, 413, 572, 686, 736, 734, 687, 619, 529, 446, 380, 259, 16]
nov = [0, 0, 151, 451, 601, 714, 746, 733, 671, 588, 506, 431, 377, 283, 35]
dez = [0, 0, 95, 353, 495, 607, 647, 633, 587, 513, 443, 360, 297, 244, 74]

# Criando as matrizes
h = np.linspace(5, 19, 15) # vetor com as horas
n = 5 # número de funções gaussianas
phi = np.zeros((15, n)) # matriz das gaussianas
w = np.zeros((n, 1)) # matriz dos coeficientes


# Função gaussiana
def rbf(x, c, s):
    return np.exp(-1 / (2 * s**2) * (x - c)**2)

# Cálculo dos centros
def centro(n):
    return np.linspace(0,23,n)

# Cálculo do desvio padrão
def desvio(x):
    return st.pstdev(x)

# Preenchendo o vetor de funções (phi)
for i in range(15):
    for j in range(n):
        phi[i][j] = rbf(h[i], centro(n)[j], desvio(h))

# Ajuste de curvas RBF
def ac(w, v, t):
  s = 0
  for j in range(n):
      s += rbf(v[t], centro(n)[j], desvio(v)) * w[j]
  return s

# Função para calcular e plotar o ajuste de curvas de cada mês
def mes(m):

## Matriz de coeficientes (w)
  m1 = np.linalg.inv((phi).T @ phi)
  m2 = (phi).T @ m # mês
  w = (m1 @ m2)

## Eixos
  x = np.linspace(5, 19, 100)
  y = np.linspace(5, 19, 100)

## Plot
  for i in range(len(x)):
    y[i] = ac(w, x, i) # função
    if(y[i]<0): # para evitar valores negativos
      y[i]=0
  print('w = ', w)
  plt.plot(x, y)
  plt.scatter(h, m)
  plt.grid()
  plt.savefig(f'{plt.title}.png')
  # opcional: mostrar os gráficos
  #plt.show()

plt.title("Janeiro")
mes(jan)
plt.title("Fevereiro")
mes(fev)
plt.title("Março")
mes(mar)
plt.title("Abril")
mes(abr)
plt.title("Maio")
mes(mai)
plt.title("Junho")
mes(jun)
plt.title("Julho")
mes(jul)
plt.title("Agosto")
mes(ago)
plt.title("Setembro")
mes(set)
plt.title("Outubro")
mes(out)
plt.title("Novembro")
mes(nov)
plt.title("Dezembro")
mes(dez)
